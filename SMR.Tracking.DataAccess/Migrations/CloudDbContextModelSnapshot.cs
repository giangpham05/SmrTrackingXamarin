// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMR.Tracking.DataAccess;

namespace SMR.Tracking.DataAccess.Migrations
{
    [DbContext(typeof(CloudDbContext))]
    partial class CloudDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SMR.Tracking.Domain.AT", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Ats");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.AssetCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AssetConditions");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.Defect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefectAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DefectTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationFrom")
                        .HasColumnType("int");

                    b.Property<string>("LocationFromDesc")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<Guid?>("LocationPrefixId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LocationTo")
                        .HasColumnType("int");

                    b.Property<string>("LocationToDesc")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RepairComments")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("RepairDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RepairDateDue")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RepairerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("St1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("St2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WalkByInspectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AtId");

                    b.HasIndex("DefectTypeId");

                    b.HasIndex("LocationPrefixId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("St1Id");

                    b.HasIndex("St2Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("WalkByInspectionId");

                    b.ToTable("Defects");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.DefectInspector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DefectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InspectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DefectId");

                    b.HasIndex("InspectorId");

                    b.ToTable("DefectInspectors");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.DefectRepairLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DefectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("RepaierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RepairComment")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("RepairDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DefectId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("RepaierId");

                    b.ToTable("DefectRepairLine");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.DefectType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefectAction")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Label")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("St2Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriorityId");

                    b.HasIndex("St2Id");

                    b.ToTable("DefectTypes");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.FileAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Attachment")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DefectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Filename")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<long>("Filesize")
                        .HasColumnType("bigint");

                    b.Property<string>("Mimetype")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DefectId");

                    b.ToTable("FileAttachments");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.HiRailAssetType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("HiRailAssetTypes");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.HiRailInspection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssetConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.HasIndex("AssetConditionId");

                    b.ToTable("HiRailInspections");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.HiRailInspector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HiRailInspectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InspectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HiRailInspectionId");

                    b.HasIndex("InspectorId");

                    b.ToTable("HiRailInspectors");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.HiRailLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("HiRailLocations");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.HiRailMatrix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssetConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HiRailAssetTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HiRailInspectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HiRailLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssetConditionId");

                    b.HasIndex("HiRailAssetTypeId");

                    b.HasIndex("HiRailInspectionId");

                    b.HasIndex("HiRailLocationId");

                    b.ToTable("HiRailMatrices");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.Inspector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Inspectors");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.LocationIncrement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LocationPrefixId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationPrefixId");

                    b.ToTable("LocationIncrements");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.LocationPrefix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LocationPrefixes");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.Priority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DueDays")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Priorities");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.Repairer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Repairers");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.ST1", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AtId");

                    b.ToTable("St1s");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.ST2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("St1Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("St1Id");

                    b.ToTable("St2s");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.WalkByInspection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssetConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Gauge")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<Guid?>("LocationPrefixId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PoorSleepers")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Super")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("AssetConditionId");

                    b.HasIndex("LocationPrefixId");

                    b.ToTable("WalkByInspections");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.WalkByInspector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InspectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("WalkByInspectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.HasIndex("WalkByInspectionId");

                    b.ToTable("WalkByInspectors");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.Defect", b =>
                {
                    b.HasOne("SMR.Tracking.Domain.AT", "At")
                        .WithMany("Defects")
                        .HasForeignKey("AtId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.Repairer", "Repairer")
                        .WithMany("Defects")
                        .HasForeignKey("AtId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.DefectType", "DefectType")
                        .WithMany("Defects")
                        .HasForeignKey("DefectTypeId");

                    b.HasOne("SMR.Tracking.Domain.LocationPrefix", "LocationPrefix")
                        .WithMany("Defects")
                        .HasForeignKey("LocationPrefixId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.Priority", "Priority")
                        .WithMany("Defects")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.ST1", "St1")
                        .WithMany("Defects")
                        .HasForeignKey("St1Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.ST2", "St2")
                        .WithMany("Defects")
                        .HasForeignKey("St2Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.Status", "Status")
                        .WithMany("Defects")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.WalkByInspection", "WalkByInspection")
                        .WithMany("Defects")
                        .HasForeignKey("WalkByInspectionId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SMR.Tracking.Domain.DefectInspector", b =>
                {
                    b.HasOne("SMR.Tracking.Domain.Defect", "Defect")
                        .WithMany("DefectInspectors")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.Inspector", "Inspector")
                        .WithMany("DefectInspectors")
                        .HasForeignKey("InspectorId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SMR.Tracking.Domain.DefectRepairLine", b =>
                {
                    b.HasOne("SMR.Tracking.Domain.Defect", "Defect")
                        .WithMany("DefectRepairLines")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.Inventory", "Inventory")
                        .WithMany("DefectRepairLines")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.Repairer", "Repairer")
                        .WithMany("DefectRepairLines")
                        .HasForeignKey("RepaierId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SMR.Tracking.Domain.DefectType", b =>
                {
                    b.HasOne("SMR.Tracking.Domain.Priority", "Priority")
                        .WithMany("DefectTypes")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.ST2", "St2")
                        .WithMany("DefectTypes")
                        .HasForeignKey("St2Id")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SMR.Tracking.Domain.FileAttachment", b =>
                {
                    b.HasOne("SMR.Tracking.Domain.Defect", "Defect")
                        .WithMany("FileAttachments")
                        .HasForeignKey("DefectId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SMR.Tracking.Domain.HiRailInspection", b =>
                {
                    b.HasOne("SMR.Tracking.Domain.AssetCondition", "AssetCondition")
                        .WithMany("HiRailInspections")
                        .HasForeignKey("AssetConditionId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SMR.Tracking.Domain.HiRailInspector", b =>
                {
                    b.HasOne("SMR.Tracking.Domain.HiRailInspection", "HiRailInspection")
                        .WithMany("HiRailInspectors")
                        .HasForeignKey("HiRailInspectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.Inspector", "Inspector")
                        .WithMany("HiRailInspectors")
                        .HasForeignKey("InspectorId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SMR.Tracking.Domain.HiRailMatrix", b =>
                {
                    b.HasOne("SMR.Tracking.Domain.AssetCondition", "AssetCondition")
                        .WithMany("HiRailMatrices")
                        .HasForeignKey("AssetConditionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.HiRailAssetType", "HiRailAssetType")
                        .WithMany("HiRailMatrices")
                        .HasForeignKey("HiRailAssetTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.HiRailInspection", "HiRailInspection")
                        .WithMany("HiRailMatrices")
                        .HasForeignKey("HiRailInspectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.HiRailLocation", "HiRailLocation")
                        .WithMany("HiRailMatrices")
                        .HasForeignKey("HiRailLocationId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SMR.Tracking.Domain.LocationIncrement", b =>
                {
                    b.HasOne("SMR.Tracking.Domain.LocationPrefix", "LocationPrefix")
                        .WithMany("LocationIncrements")
                        .HasForeignKey("LocationPrefixId");
                });

            modelBuilder.Entity("SMR.Tracking.Domain.ST1", b =>
                {
                    b.HasOne("SMR.Tracking.Domain.AT", "At")
                        .WithMany("St1s")
                        .HasForeignKey("AtId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SMR.Tracking.Domain.ST2", b =>
                {
                    b.HasOne("SMR.Tracking.Domain.ST1", "St1")
                        .WithMany("St2s")
                        .HasForeignKey("St1Id")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SMR.Tracking.Domain.WalkByInspection", b =>
                {
                    b.HasOne("SMR.Tracking.Domain.AssetCondition", "AssetCondition")
                        .WithMany("WalkByInspections")
                        .HasForeignKey("AssetConditionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.LocationPrefix", "LocationPrefix")
                        .WithMany("WalkByInspections")
                        .HasForeignKey("LocationPrefixId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SMR.Tracking.Domain.WalkByInspector", b =>
                {
                    b.HasOne("SMR.Tracking.Domain.Inspector", "Inspector")
                        .WithMany("WalkByInspectors")
                        .HasForeignKey("InspectorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SMR.Tracking.Domain.WalkByInspection", "WalkByInspection")
                        .WithMany("WalkByInspectors")
                        .HasForeignKey("WalkByInspectionId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
